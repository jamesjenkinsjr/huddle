{"version":3,"sources":["Nav/Nav.jsx","config.js","services/token-service.js","services/portal-api-service.js","PortalForm/PortalForm.js","Message/Message.js","services/message-api-service.js","MessageForm/MessageForm.js","Portal/Portal.js","About/About.jsx","HowTo/HowTo.jsx","App/App.js","index.js"],"names":["Nav","className","to","API_ENDPOINT","process","REACT_APP_API_URL","TOKEN_KEY","TokenService","getPortalToken","id","window","localStorage","getItem","config","hasPortalToken","setPortalToken","token","setItem","clearPortalToken","removeItem","addBearerIfPresent","Authorization","PortalAPIService","getPortalByID","fetch","method","headers","then","res","ok","json","status","Error","createNewPortal","data","body","JSON","stringify","getPortalMessages","createPortalMessage","authorizeGatedPortal","PortalForm","state","error","validated","expiry_type","use_password","password","password_confirm","handleNewPortal","e","expiry_timestamp","preventDefault","target","day_options","value","Date","setDate","getDate","setMonth","getMonth","date","name","portal","props","handlePortal","history","push","catch","setState","message","handleExpiryType","currentTarget","generateTomorrowDatetime","tomorrow","offset","getTimezoneOffset","toISOString","slice","handlePasswordToggle","stopPropagation","validatePasswords","length","handleUpdatePasswords","handlePassword","a","onSubmit","this","htmlFor","type","maxLength","required","onChange","defaultValue","checked","disabled","React","Component","Message","content","create_timestamp","author","MessageService","addMessage","portal_id","getMessageByID","MessageForm","handleSubmit","newMessage","handleNewMessage","handleTextarea","shiftKey","key","submitButton","click","onKeyPress","ref","input","Portal","loading","gated","scrollToBottom","scrollEl","scrollIntoView","behavior","handleRenderPortal","handleRenderMessages","match","params","messages","handleMessages","handlePortalValidation","validate_password","portalAuth","handleClosePortal","interval","setInterval","clearInterval","map","toLocaleString","onClick","tabIndex","style","float","clear","el","defaultProps","About","App","exact","path","render","routeProps","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fbfaf13d.chunk.js","sourcesContent":["import React from 'react'\nimport './Nav.css'\nimport { Link } from 'react-router-dom'\n\nexport default function Nav() {\n  return (\n    <div className=\"nav__container\">\n      <ul className='nav__list'>\n        <li><Link to='/'>Home</Link></li>\n        <li><Link to='/huddle/about'>About</Link></li>\n        <li><Link to='/huddle/how-to'>How To Use</Link></li>\n      </ul>\n    </div>\n  )\n}","export default {\n  API_ENDPOINT:\n    process.env.REACT_APP_API_URL || process.env.NODE_ENV === 'production'\n      ? 'https://huddle-app-server.herokuapp.com/api'\n      : 'http://localhost:8069/api',\n  TOKEN_KEY: 'huddle-auth',\n}\n","import config from '../config'\n\nconst TokenService = {\n  getPortalToken: id => {\n    return window.localStorage.getItem(`${config.TOKEN_KEY}-${id}`)\n  },\n  hasPortalToken: id => {\n    return !!TokenService.getPortalToken(id)\n  },\n  setPortalToken: (id, token) => {\n    window.localStorage.setItem(`${config.TOKEN_KEY}-${id}`, token)\n  },\n  clearPortalToken: id => {\n    window.localStorage.removeItem(`${config.TOKEN_KEY}-${id}`)\n  },\n  addBearerIfPresent: id => {\n    if (TokenService.hasPortalToken(id)) {\n      return {\n        'content-type': 'application/json',\n        Authorization: `Bearer ${TokenService.getPortalToken(id)}`,\n      }\n    } else {\n      return {\n        'content-type': 'application/json',\n      }\n    }\n  },\n}\n\nexport default TokenService\n","import config from '../config'\nimport TokenService from './token-service'\n\nconst PortalAPIService = {\n  getPortalByID(id) {\n    return fetch(`${config.API_ENDPOINT}/portal/${id}`, {\n      method: 'GET',\n      headers: TokenService.addBearerIfPresent(id),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      if (res.status === 401) {\n        throw new Error('Unauthorized portal request')\n      }\n      throw new Error('Failed to fetch portal - please try again')\n    })\n  },\n  createNewPortal(data) {\n    return fetch(`${config.API_ENDPOINT}/portal`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('Failed to generate new portal - please try again')\n    })\n  },\n  getPortalMessages(id) {\n    return fetch(`${config.API_ENDPOINT}/portal/${id}/messages`, {\n      method: 'GET',\n      headers: TokenService.addBearerIfPresent(id),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('No messages found')\n    })\n  },\n  createPortalMessage(id, data) {\n    return fetch(`${config.API_ENDPOINT}/portal/${id}`, {\n      method: 'POST',\n      headers: TokenService.addBearerIfPresent(id),\n      body: JSON.stringify(data),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('Message send failed - please try again')\n    })\n  },\n  authorizeGatedPortal(id, data) {\n    return fetch(`${config.API_ENDPOINT}/portal/${id}/auth`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('Authentication failed!')\n    })\n  },\n}\n\nexport default PortalAPIService\n","import React from 'react'\nimport './PortalForm.css'\nimport PortalAPIService from '../services/portal-api-service'\n\nexport default class PortalForm extends React.Component {\n  state = {\n    error: '',\n    validated: true,\n    expiry_type: 'day',\n    use_password: false,\n    password: '',\n    password_confirm: '',\n  }\n\n  handleNewPortal = e => {\n    let expiry_timestamp\n    e.preventDefault()\n\n    if (this.state.expiry_type === 'day') {\n      switch (e.target.day_options.value) {\n        case 'day':\n          expiry_timestamp = new Date()\n          expiry_timestamp.setDate(expiry_timestamp.getDate() + 1)\n          break\n        case 'week':\n          expiry_timestamp = new Date()\n          expiry_timestamp.setDate(expiry_timestamp.getDate() + 7)\n          break\n        case '2-weeks':\n          expiry_timestamp = new Date()\n          expiry_timestamp.setDate(expiry_timestamp.getDate() + 14)\n          break\n        case 'month':\n          expiry_timestamp = new Date()\n          expiry_timestamp.setMonth(expiry_timestamp.getMonth() + 1)\n          break\n        case '3-months':\n          expiry_timestamp = new Date()\n          expiry_timestamp.setMonth(expiry_timestamp.getMonth() + 3)\n          break\n        default:\n          return null\n      }\n    }\n\n    if (this.state.expiry_type === 'date') {\n      expiry_timestamp = e.target.date.value\n    }\n\n    const name = e.target.name.value\n    const { use_password, password = null } = this.state\n\n    PortalAPIService.createNewPortal({\n      name,\n      expiry_timestamp,\n      use_password,\n      password,\n    })\n      .then(portal => {\n        this.props.handlePortal(portal)\n      })\n      .then(() => this.props.history.push(`/${this.props.portal.id}`))\n      .catch(error => {\n        this.setState({\n          error: error.message,\n        })\n      })\n  }\n\n  handleExpiryType = e => {\n    e.preventDefault()\n    this.setState({\n      expiry_type: e.currentTarget.value,\n    })\n  }\n\n  generateTomorrowDatetime = () => {\n    let tomorrow = new Date()\n    let offset = tomorrow.getTimezoneOffset() * 60000\n    tomorrow.setDate(tomorrow.getDate() + 1)\n    return new Date(tomorrow - offset).toISOString().slice(0, 16)\n  }\n\n  handlePasswordToggle = e => {\n    e.stopPropagation()\n    this.setState({\n      use_password: !this.state.use_password,\n    })\n  }\n\n  validatePasswords = () => {\n    if (\n      this.state.use_password &&\n      this.state.password !== this.state.password_confirm\n    ) {\n      this.setState({\n        error: 'Passwords must match',\n        validated: false,\n      })\n    } else if (this.state.password.length <= 3) {\n      this.setState({\n        error: 'Password must be greater than 3 characters',\n        validated: false,\n      })\n    } else {\n      this.setState({\n        error: '',\n        validated: true,\n      })\n    }\n    return\n  }\n  handleUpdatePasswords = e => {\n    if (e.target.id === 'password') {\n      this.setState({\n        password: e.target.value,\n      })\n    } else {\n      this.setState({\n        password_confirm: e.target.value,\n      })\n    }\n  }\n\n  handlePassword = async e => {\n    e.preventDefault()\n    await this.handleUpdatePasswords(e)\n    await this.validatePasswords()\n  }\n\n  render() {\n    return (\n      <form className=\"portal__form\" onSubmit={e => this.handleNewPortal(e)}>\n        {this.state.error !== '' && (\n          <p className=\"portal__form--error\">{this.state.error}</p>\n        )}\n        <label htmlFor=\"name\">\n          Enter A Huddle Name*\n          <input type=\"text\" name=\"name\" id=\"name\" maxLength=\"24\" required />\n        </label>\n        <label htmlFor=\"expiry_type\">\n          Expiration Type*\n          <select\n            name=\"expiry_type\"\n            id=\"expiry_type\"\n            required\n            onChange={this.handleExpiryType}\n            value={this.state.expiry_type}\n          >\n            <option value=\"day\">Day</option>\n            <option value=\"date\">Date</option>\n          </select>\n        </label>\n        {this.state.expiry_type === 'day' && (\n          <label htmlFor=\"day_options\">\n            Expires In\n            <select name=\"day_options\" id=\"day_options\">\n              <option value=\"day\">1 Day</option>\n              <option value=\"week\">1 Week</option>\n              <option value=\"2-weeks\">2 Weeks</option>\n              <option value=\"month\">1 Month</option>\n              <option value=\"3-months\">3 Months</option>\n            </select>\n          </label>\n        )}\n        {this.state.expiry_type === 'date' && (\n          <label htmlFor=\"date\">\n            Expires On\n            <input\n              type=\"datetime-local\"\n              id=\"date\"\n              name=\"date\"\n              defaultValue={this.generateTomorrowDatetime()}\n              required\n            ></input>\n          </label>\n        )}\n        <div className=\"portal__form--password-container\">\n          <label htmlFor=\"password_toggle\" className=\"portal__form--checkbox\">\n            Use Password?\n          </label>\n          <input\n            type=\"checkbox\"\n            name=\"password_toggle\"\n            id=\"password_toggle\"\n            className=\"portal__form--checkbox\"\n            onChange={this.handlePasswordToggle}\n            checked={this.state.use_password}\n          />\n        </div>\n        {this.state.use_password && (\n          <>\n            <label htmlFor=\"password\">\n              Enter Password\n              <input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                required\n                onChange={this.handlePassword}\n              />\n            </label>\n            <label htmlFor=\"password_confirm\">\n              Confirm Password\n              <input\n                type=\"password\"\n                name=\"password_confirm\"\n                id=\"password_confirm\"\n                required\n                onChange={this.handlePassword}\n              />\n            </label>\n          </>\n        )}\n        <button type=\"submit\" disabled={!this.state.validated}>\n          Generate Portal\n        </button>\n      </form>\n    )\n  }\n}\n","import React from 'react'\nimport './Message.css'\n\nexport default function Message(props) {\n  return (\n    <li className=\"portal__message-item\">\n      <p className=\"portal__message-content\">{props.content}</p>\n      <p className=\"portal__message-info\">\n        Sent {props.create_timestamp} - {props.author}\n      </p>\n    </li>\n  )\n}\n","import config from '../config'\nimport TokenService from '../services/token-service'\n\nconst MessageService = {\n  addMessage: data => {\n    return fetch(`${config.API_ENDPOINT}/message`, {\n      method: 'POST',\n      headers: TokenService.addBearerIfPresent(data.portal_id),\n      body: JSON.stringify(data),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('Message send failed - please try again')\n    })\n  },\n  getMessageByID: (portal_id, id) => {\n    return fetch(`${config.API_ENDPOINT}/message/${id}`, {\n      method: 'GET',\n      headers: TokenService.addBearerIfPresent(portal_id),\n    }).then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('Failed to fetch message')\n    })\n  },\n}\n\nexport default MessageService\n","import React from 'react'\nimport './MessageForm.css'\nimport MessageService from '../services/message-api-service'\n\nexport default class MessageForm extends React.Component {\n  state = {\n    error: '',\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    const { author, content } = e.target\n    const newMessage = { author: author.value, content: content.value }\n    newMessage.portal_id = this.props.portal_id\n    MessageService.addMessage(newMessage)\n      .then(message => {\n        MessageService.getMessageByID(message.portal_id, message.id)\n        this.props.handleNewMessage(message)\n        content.value = ''\n      })\n      .catch(error => {\n        this.setState({\n          error: error.message,\n        })\n      })\n  }\n\n  handleTextarea = e => {\n    if (!e.shiftKey && e.key === 'Enter') {\n      e.preventDefault()\n      e.stopPropagation()\n      this.submitButton.click()\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"portal__message-form\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"author\">\n          Name\n          <input type=\"text\" name=\"author\" id=\"author\" />\n        </label>\n        <label htmlFor=\"content\">\n          Message\n          <textarea\n            onKeyPress={this.handleTextarea}\n            name=\"content\"\n            id=\"content\"\n            required\n          ></textarea>\n        </label>\n        <button type=\"submit\" ref={input => (this.submitButton = input)}>\n          Submit\n        </button>\n      </form>\n    )\n  }\n}\n","import React from 'react'\nimport './Portal.css'\nimport Message from '../Message/Message'\nimport PortalAPIService from '../services/portal-api-service'\nimport MessageForm from '../MessageForm/MessageForm'\nimport TokenService from '../services/token-service'\n\nexport default class Portal extends React.Component {\n  static defaultProps = {\n    portal: {},\n    messages: [],\n    match: {\n      params: {\n        id: '',\n      },\n    },\n    history: {\n      push: () => {},\n    },\n  }\n  state = {\n    error: '',\n    loading: true,\n    gated: false,\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: false,\n    })\n\n    this.handleRenderPortal(this.props.match.params.id)\n    this.interval = setInterval(\n      () => this.handleRenderMessages(this.props.portal.id),\n      5000\n    )\n    if (this.scrollEl) {\n      this.scrollToBottom()\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.scrollEl) {\n      this.scrollToBottom()\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  scrollToBottom = () => {\n    this.scrollEl.scrollIntoView({ behavior: 'auto' })\n  }\n\n  handleRenderPortal = id => {\n    this.setState({\n      loading: true,\n    })\n    PortalAPIService.getPortalByID(id)\n      .then(portal => {\n        if (!portal) {\n          this.setState({\n            error: 'Portal does not exist',\n          })\n        }\n        this.props.handlePortal(portal)\n      })\n      .then(() => {\n        /**\n         * Check if portal does not require password before\n         * loading portal messages. If it does, render\n         * check that an auth token is set before attempting\n         * intial message loading\n         */\n        if (\n          !this.props.portal.use_password ||\n          TokenService.hasPortalToken(this.props.portal.id)\n        ) {\n          this.handleRenderMessages(this.props.portal.id)\n        }\n      })\n      .then(() => {\n        this.setState({\n          loading: false,\n          gated: this.props.portal.use_password,\n        })\n      })\n      .catch(error => {\n        if (error.message === 'Unauthorized portal request') {\n          this.setState({\n            error: error.message,\n            gated: true,\n          })\n        } else {\n          this.setState({\n            error: error.message,\n          })\n        }\n      })\n  }\n\n  handleRenderMessages = id => {\n    if (!id) {\n      return\n    }\n    if (\n      /**\n       * Depending on status of portal validation,\n       * check for both props or local state to police\n       * messages loading.\n       */\n\n      (this.props.portal.use_password || this.state.gated) &&\n      !TokenService.hasPortalToken(this.props.match.params.id)\n    ) {\n      return\n    }\n    PortalAPIService.getPortalMessages(id)\n      .then(messages => {\n        if (messages.length !== this.props.messages.length) {\n          this.props.handleMessages(messages)\n          this.setState({ loading: false })\n        }\n      })\n      .catch(error => this.setState({ error: error.message, loading: false }))\n  }\n\n  handlePortalValidation = e => {\n    e.preventDefault()\n    const password = e.target.validate_password.value\n    e.target.validate_password.value = ''\n    PortalAPIService.authorizeGatedPortal(this.props.match.params.id, {\n      password,\n    })\n      .then(res => {\n        TokenService.setPortalToken(this.props.match.params.id, res.portalAuth)\n        this.setState({\n          validated: true,\n          error: '',\n        })\n      })\n      .then(() => this.handleRenderPortal(this.props.match.params.id))\n      .catch(error => this.setState({ error: error.message }))\n  }\n\n  handleClosePortal = e => {\n    e.preventDefault()\n    if (this.state.gated) {\n      TokenService.clearPortalToken(this.props.portal.id)\n      this.handleRenderPortal(this.props.portal.id)\n    } else {\n      this.props.history.push('/')\n    }\n  }\n\n  render() {\n    const messages = this.props.messages.map(message => (\n      <Message\n        key={message.id}\n        author={message.author}\n        content={message.content}\n        create_timestamp={new Date(message.create_timestamp).toLocaleString()}\n      />\n    ))\n    if (\n      !this.state.loading &&\n      this.state.error === '' &&\n      (!this.state.gated ||\n        TokenService.hasPortalToken(this.props.match.params.id))\n    ) {\n      return (\n        <section className=\"portal__container\">\n          <div className=\"portal__heading-container\">\n            <div className=\"portal__message-list-heading\">\n              <h2 className=\"portal__title\">{this.props.portal.name}</h2>\n              <p className=\"portal__expiry-datetime\">\n                Expires on{' '}\n                {new Date(this.props.portal.expiry_timestamp).toLocaleString()}\n              </p>\n            </div>\n            <button\n              className=\"portal__close-session\"\n              onClick={this.handleClosePortal}\n            >\n              Exit Huddle\n            </button>\n          </div>\n          {this.props.messages.length > 0 && !this.state.loading && (\n            <ul className=\"portal__message-list\" tabIndex=\"0\">\n              {messages}\n              <li\n                style={{ float: 'left', clear: 'both' }}\n                ref={el => (this.scrollEl = el)}\n              ></li>\n            </ul>\n          )}\n          {this.props.messages.length === 0 && (\n            <p className=\"portal__empty-messages\">No messages found.</p>\n          )}\n          <MessageForm\n            handleNewMessage={this.props.handleNewMessage}\n            portal_id={this.props.match.params.id}\n          />\n        </section>\n      )\n    } else if (\n      this.state.gated &&\n      !TokenService.hasPortalToken(this.props.match.params.id)\n    ) {\n      return (\n        <form\n          className=\"portal__gate-form\"\n          onSubmit={this.handlePortalValidation}\n        >\n          <label htmlFor=\"validate_password\">\n            Enter password\n            <input\n              type=\"password\"\n              name=\"validate_password\"\n              id=\"validate_password\"\n            />\n          </label>\n        </form>\n      )\n    } else if (this.state.loading && !this.state.error) {\n      return <h2 className=\"portal__loading-heading\">Loading...</h2>\n    } else {\n      return <h2 className=\"portal__error\">{this.state.error}</h2>\n    }\n  }\n}\n","import React from 'react'\nimport './About.css'\n\nexport default function About() {\n  return (\n    <div className=\"about__container\">\n      <header>\n        <h2>About Huddle</h2>\n      </header>\n      <section>\n        <p>\n          Huddle was created to solve a simple problem: easily accessible lines\n          of communication without a need to make new accounts, give out personal\n          information, or worry about leaving someone out. \n        </p>\n        <br/>\n        <p>With Huddle, everyone\n          with your unique Huddle room link (generated using a V4 UUID) can immediately provide basic,\n          private information and jump into the conversation. No more forwarded\n          emails, massive laggy text message groups, or social media friend\n          requests. Simply generate a huddle room, provide the link to anyone,\n          and get started being productive!</p>\n      </section>\n    </div>\n  )\n}\n","import React from 'react'\nimport './HowTo.css'\n\nexport default () => {\n  return (\n    <div className=\"howto__container\">\n      <header>\n        <h2>How To Use</h2>\n      </header>\n      <section>\n        <ol className=\"howto__overview\">\n          <li>\n            <p>Fill out Huddle portal form with required information:</p>\n            <ul>\n              <li>\n                Huddle Name — Friendly name that will display while viewing a\n                Huddle portal.\n              </li>\n              <li>\n                Expiration — Date/time in the future that your Huddle portal\n                will expire. After this date, the portal and all messages within\n                will be permanently deleted.\n              </li>\n            </ul>\n          </li>\n          <li>\n            <p>\n              Optionally set a password on your portal to futher protect access\n              to the conversation. This password is encrypted and never stored locally.\n            </p>\n          </li>\n          <li><p>Submit the Huddle portal form</p></li>\n          <li><p>IMPORANT! Copy and safeguard the URL to your portal. This is your ONLY\n            resource for accessing the portal. If it is lost, your portal will not be\n            retrievable.</p></li>\n          <li><p>Share your portal URL with anyone, anywhere. The chat form will persist \n            the name you enter, allowing for quick messaging in seconds. Use SHIFT + ENTER\n            to create paragraphs for longer messages.</p></li>\n        </ol>\n      </section>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Route, Link } from 'react-router-dom'\nimport './App.css'\nimport Nav from '../Nav/Nav'\nimport PortalForm from '../PortalForm/PortalForm'\nimport Portal from '../Portal/Portal'\nimport About from '../About/About'\nimport HowTo from '../HowTo/HowTo'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      error: '',\n      portal: {},\n      messages: [],\n    }\n  }\n\n  handlePortal = portal => {\n    this.setState({\n      portal: {\n        id: portal.id,\n        name: portal.name,\n        use_password: portal.use_password,\n        expiry_timestamp: portal.expiry_timestamp,\n        create_timestamp: portal.create_timestamp,\n      },\n    })\n  }\n\n  handleMessages = data => {\n    this.setState({\n      messages: data,\n    })\n  }\n\n  handleNewMessage = message => {\n    this.setState({\n      messages: [...this.state.messages, message],\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link to=\"/\">\n            <h1 className=\"portal__header\">Huddle</h1>\n          </Link>\n        </header>\n        {!this.state.error && (\n          <>\n            <Route\n              exact\n              path={['/', '/huddle/about', '/huddle/how-to']}\n              render={() => <Nav />}\n            />\n            <Route\n              exact\n              path=\"/\"\n              render={routeProps => (\n                <PortalForm\n                  {...routeProps}\n                  handlePortal={this.handlePortal}\n                  portal={this.state.portal}\n                />\n              )}\n            />\n            <Route exact path=\"/huddle/about\" render={() => <About />} />\n            <Route exact path=\"/huddle/how-to\" render={() => <HowTo />} />\n            <Route\n              exact\n              path=\"/:id\"\n              render={routeProps => (\n                <Portal\n                  {...routeProps}\n                  handlePortal={this.handlePortal}\n                  handleMessages={this.handleMessages}\n                  handleNewMessage={this.handleNewMessage}\n                  portal={this.state.portal}\n                  messages={this.state.messages}\n                />\n              )}\n            />\n          </>\n        )}\n        {this.state.error && <p className=\"App__error\">{this.state.error}</p>}\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App/App'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}